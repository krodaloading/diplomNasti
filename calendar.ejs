<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <title>–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ –∏ –º—É–ª—å—Ç–∏–≤—ã–¥–µ–ª–µ–Ω–∏–µ–º</title>
  <style>
    body {
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      padding: 0;
      margin: 0px;
      user-select: none; /* —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª—è–ª—Å—è –ø—Ä–∏ drag */
    }
    /* –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–∞—Ç—ã */
    .date-navigator {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: space-between;
      width: 700px;
      margin: 0 auto 30px;
    }
    .left-group, .right-group {
      display: flex;
      align-items: center;
      gap: 10px;
      flex-shrink: 0;
    }
    .center-group {
      display: flex;
      align-items: center;
      gap: 10px;
      flex-grow: 1;
      justify-content: center;
      min-width: 140px;
    }
    .date-display {
      min-width: 100px;
      text-align: center;
      font-weight: bold;
      font-size: 18px;
    }
    button {
      cursor: pointer;
      font-size: 16px;
      padding: 6px 10px;
      border-radius: 6px;
      border: 1px solid #ccc;
      background-color: #7FFFD4;
      transition: background-color 0.3s;
    }
    button:hover {
      background-color: #5ee3c3;
    }
    #datePicker {
      position: absolute;
      top: 38px;
      right: 0;
      opacity: 0;
      pointer-events: none;
      width: 160px;
      height: 30px;
      font-size: 16px;
      border-radius: 6px;
      border: 1px solid #ccc;
      z-index: 1000;
      transition: opacity 0.2s ease;
    }
    #datePicker.show {
      opacity: 1;
      pointer-events: auto;
    }

    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ */
    .calendar-wrapper {
      max-width: 900px;
      margin: 0 auto;
      display: flex;
      gap: 10px;
      position: relative;
    }

    /* –ü–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–ª–µ–≤–∞ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã */
    #projectPanel {
      width: 200px;
      background: #e0f7f7;
      border: 1px solid #ccc;
      border-radius: 6px;
      padding: 10px;
      box-sizing: border-box;
      font-size: 14px;
      user-select: text;
      max-height: 400px;
      overflow-y: auto;
      position: sticky;
      top: 80px;
      z-index: 100;
    }
    #projectPanel h3 {
      margin-top: 0;
      margin-bottom: 8px;
      font-weight: 700;
    }
    #projectPanel .project-item {
      padding: 6px 8px;
      margin-bottom: 6px;
      background: #7fffd4;
      border-radius: 4px;
      cursor: pointer;
      transition: background-color 0.2s;
    }
    #projectPanel .project-item.selected,
    #projectPanel .project-item:hover {
      background-color: #5ee3c3;
    }
    #projectPanel .card-item {
      padding: 4px 6px;
      margin-left: 10px;
      margin-bottom: 4px;
      background: #aaf0d1;
      border-radius: 4px;
      cursor: default;
      user-select: none;
      font-size: 13px;
    }

    /* –¢–∞–±–ª–∏—Ü–∞ */
    table.calendar-table {
      border-collapse: collapse;
      width: 100%;
      table-layout: fixed;
      user-select: none;
    }
    table.calendar-table th,
    table.calendar-table td {
      border: 1px solid #aaa;
      padding: 4px;
      text-align: center;
      font-size: 12px;
      overflow: hidden;
      white-space: nowrap;
      vertical-align: middle;
    }
    table.calendar-table th {
      background-color: #f0f0f0;
      font-weight: 600;
    }
    table.calendar-table td:first-child {
      font-weight: 600;
      text-align: left;
      padding-left: 6px;
      background-color: #f9f9f9;
      user-select: text;
    }
    /* –ö–Ω–æ–ø–∫–∏ –≤ —è—á–µ–π–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã */
    table.calendar-table td button.cell-btn {
      width: 100%;
      height: 24px;
      background: transparent;
      border: none;
      cursor: pointer;
      user-select: none;
    }
    table.calendar-table td button.cell-btn.selected {
      background-color: lightgreen;
    }
    table.calendar-table td button.cell-btn.multi-selected {
      background-color: #90ee90cc;
    }
  </style>
</head>
<body>
  <!-- –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–∞—Ç—ã -->
  <div class="date-navigator">
    <div class="left-group">
      <button id="todayBtn" aria-label="–°–µ–≥–æ–¥–Ω—è">–°–µ–≥–æ–¥–Ω—è</button>
    </div>
    <div class="center-group">
      <button id="prevBtn" aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å">‚Üê</button>
      <div id="dateDisplay" class="date-display"></div>
      <button id="nextBtn" aria-label="–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å">‚Üí</button>
    </div>
    <div class="right-group">
      <button id="calendarBtn" aria-label="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É">üìÖ</button>
    </div>
    <input type="date" id="datePicker" aria-label="–í—ã–±–æ—Ä –¥–∞—Ç—ã" />
  </div>

  <div class="calendar-wrapper">
    <!-- –ü–ª–∞–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–∞—Ä—Ç -->
    <div id="projectPanel" aria-label="–ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–¥–∞—á">
      <h3>–ü—Ä–æ–µ–∫—Ç—ã</h3>
      <div id="projectListContainer"></div>
    </div>

    <!-- –¢–∞–±–ª–∏—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è -->
    <table class="calendar-table" id="calendarTable" aria-label="–¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –ø–æ —á–∞—Å–∞–º">
      <thead>
        <tr id="headerRow">
          <th style="width:140px;">–ó–∞–¥–∞—á–∏ / –ß–∞—Å—ã</th>
          <!-- –ß–∞—Å—ã –¥–æ–±–∞–≤—è—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </tr>
      </thead>
      <tbody id="calendarBody">
        <!-- –°—Ç—Ä–æ–∫–∏ —Å –∑–∞–¥–∞—á–∞–º–∏ -->
      </tbody>
    </table>
  </div>

  <script>
    (function() {
      // --- –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –¥–∞—Ç—ã ---
      const dateDisplay = document.getElementById("dateDisplay");
      const prevBtn = document.getElementById("prevBtn");
      const nextBtn = document.getElementById("nextBtn");
      const todayBtn = document.getElementById("todayBtn");
      const calendarBtn = document.getElementById("calendarBtn");
      const datePicker = document.getElementById("datePicker");

      let currentDate = new Date();

      function formatDate(date) {
        const day = date.getDate().toString().padStart(2, "0");
        const month = (date.getMonth() + 1).toString().padStart(2, "0");
        const year = date.getFullYear();
        return `${day}.${month}.${year}`;
      }

      function isoDateString(date) {
        return date.toISOString().slice(0,10); // "YYYY-MM-DD"
      }

      function updateDisplay() {
        dateDisplay.textContent = formatDate(currentDate);
        loadTasksForDate(isoDateString(currentDate));
      }

      prevBtn.addEventListener("click", () => {
        currentDate.setDate(currentDate.getDate() - 1);
        updateDisplay();
      });

      nextBtn.addEventListener("click", () => {
        currentDate.setDate(currentDate.getDate() + 1);
        updateDisplay();
      });

      todayBtn.addEventListener("click", () => {
        currentDate = new Date();
        updateDisplay();
      });

      calendarBtn.addEventListener("click", () => {
        if (datePicker.classList.contains("show")) {
          datePicker.classList.remove("show");
        } else {
          datePicker.valueAsDate = currentDate;
          datePicker.classList.add("show");
          datePicker.focus();
        }
      });

      datePicker.addEventListener("change", () => {
        if (datePicker.value) {
          currentDate = new Date(datePicker.value);
          updateDisplay();
          datePicker.classList.remove("show");
        }
      });

      document.addEventListener("click", (e) => {
        if (!datePicker.contains(e.target) && !calendarBtn.contains(e.target)) {
          datePicker.classList.remove("show");
        }
      });

      // --- –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–∞—Ä—Ç-–∑–∞–¥–∞–Ω–∏–π ---
      const projects = [
        {
          id: 1,
          title: "–ü—Ä–æ–µ–∫—Ç –ê",
          cards: [
            { id: 11, title: "–ó–∞–¥–∞—á–∞ A1" },
            { id: 12, title: "–ó–∞–¥–∞—á–∞ A2" },
            { id: 13, title: "–ó–∞–¥–∞—á–∞ A3" },
          ]
        },
        {
          id: 2,
          title: "–ü—Ä–æ–µ–∫—Ç –ë",
          cards: [
            { id: 21, title: "–ó–∞–¥–∞—á–∞ –ë1" },
            { id: 22, title: "–ó–∞–¥–∞—á–∞ –ë2" },
          ]
        },
        {
          id: 3,
          title: "–ü—Ä–æ–µ–∫—Ç –í",
          cards: [
            { id: 31, title: "–ó–∞–¥–∞—á–∞ –í1" },
          ]
        },
      ];

      // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ ---
      let selectedProjectId = projects[0].id;
      // –í—ã–¥–µ–ª–µ–Ω–∏—è: { "YYYY-MM-DD": { projectId: { cardId: Set —á–∞—Å–æ–≤ } } }
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å: selections[date][cardId] = Set —á–∞—Å–æ–≤
      const selections = {};

      // --- –≠–ª–µ–º–µ–Ω—Ç—ã ---
      const projectListContainer = document.getElementById("projectListContainer");
      const calendarBody = document.getElementById("calendarBody");
      const headerRow = document.getElementById("headerRow");

      // --- –†–µ–Ω–¥–µ—Ä —á–∞—Å–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ ---
      function renderHeaderHours() {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ th (–Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á)
        while (headerRow.children.length > 1) {
          headerRow.removeChild(headerRow.lastChild);
        }
        for (let h = 0; h < 24; h++) {
          const th = document.createElement("th");
          th.textContent = h;
          headerRow.appendChild(th);
        }
      }

      // --- –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∫–∞—Ä—Ç–æ—á–µ–∫ ---
      function renderProjectList() {
        projectListContainer.innerHTML = "";
        projects.forEach(proj => {
          const projDiv = document.createElement("div");
          projDiv.className = "project-item";
          projDiv.textContent = proj.title;
          projDiv.dataset.projectId = proj.id;
          if (proj.id === selectedProjectId) projDiv.classList.add("selected");
          projDiv.tabIndex = 0;
          projDiv.setAttribute("role", "button");
          projDiv.setAttribute("aria-pressed", proj.id === selectedProjectId);

          projDiv.addEventListener("click", () => {
            if (selectedProjectId !== proj.id) {
              selectedProjectId = proj.id;
              renderProjectList();
              renderProjectCards();
              updateDisplay();
            }
          });
          projDiv.addEventListener("keydown", e => {
            if (e.key === "Enter" || e.key === " ") {
              e.preventDefault();
              projDiv.click();
            }
          });
          projectListContainer.appendChild(projDiv);

          // –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç–æ–º
          const cardsContainer = document.createElement("div");
          cardsContainer.style.marginLeft = "12px";
          proj.cards.forEach(card => {
            const cardDiv = document.createElement("div");
            cardDiv.className = "card-item";
            cardDiv.textContent = card.title;
            cardsContainer.appendChild(cardDiv);
          });
          projectListContainer.appendChild(cardsContainer);
        });
      }

      // --- –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---
      function renderProjectCards() {
        calendarBody.innerHTML = "";
        const project = projects.find(p => p.id === selectedProjectId);
        if (!project) return;

        project.cards.forEach(card => {
          const tr = document.createElement("tr");
          tr.dataset.cardId = card.id;

          // –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
          const tdName = document.createElement("td");
          tdName.textContent = card.title;
          tr.appendChild(tdName);

          // –ö–Ω–æ–ø–∫–∏ —á–∞—Å–æ–≤
          for (let h = 0; h < 24; h++) {
            const td = document.createElement("td");
            const btn = document.createElement("button");
            btn.className = "cell-btn";
            btn.dataset.hour = h;
            btn.title = `${card.title} ‚Äî —á–∞—Å ${h}`;
            btn.tabIndex = -1;
            td.appendChild(btn);
            tr.appendChild(td);
          }

          calendarBody.appendChild(tr);
        });
      }

      // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–µ–∫ ---
      function updateHighlighting() {
        const dateStr = isoDateString(currentDate);
        const selectedCards = selections[dateStr] || {};
        // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
        for (const tr of calendarBody.children) {
          const cardId = tr.dataset.cardId;
          for (let h = 0; h < 24; h++) {
            const btn = tr.querySelector(`button.cell-btn[data-hour="${h}"]`);
            if (!btn) continue;
            btn.classList.remove("selected", "multi-selected");
            if (selectedCards[cardId] && selectedCards[cardId].has(h)) {
              btn.classList.add("selected");
            }
          }
        }
      }

      // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ---
      function updateDisplay() {
        updateHighlighting();
        dateDisplay.textContent = formatDate(currentDate);
      }

      // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –¥–∞—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è) ---
      function loadTasksForDate(dateStr) {
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        updateHighlighting();
      }

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–∞–º ---
      calendarBody.addEventListener("click", e => {
        if (!e.target.classList.contains("cell-btn")) return;
        const btn = e.target;
        const tr = btn.closest("tr");
        const cardId = tr.dataset.cardId;
        const hour = +btn.dataset.hour;
        const dateStr = isoDateString(currentDate);

        if (!selections[dateStr]) selections[dateStr] = {};
        if (!selections[dateStr][cardId]) selections[dateStr][cardId] = new Set();

        if (selections[dateStr][cardId].has(hour)) {
          selections[dateStr][cardId].delete(hour);
        } else {
          selections[dateStr][cardId].add(hour);
        }
        updateHighlighting();
      });

      // --- –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –º—É–ª—å—Ç–∏–≤—ã–¥–µ–ª–µ–Ω–∏—è ---
      let isDragging = false;
      let dragStart = null; // { cardId, hour }
      let dragCurrent = null;

      function clearMultiSelection() {
        for (const tr of calendarBody.children) {
          for (let h = 0; h < 24; h++) {
            const btn = tr.querySelector(`button.cell-btn[data-hour="${h}"]`);
            if (btn) btn.classList.remove("multi-selected");
          }
        }
      }

      function updateDragSelection() {
        if (!isDragging || !dragStart || !dragCurrent) return;

        const dateStr = isoDateString(currentDate);
        if (!selections[dateStr]) selections[dateStr] = {};

        // –û–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        const startCardId = dragStart.cardId;
        const endCardId = dragCurrent.cardId;
        const startHour = dragStart.hour;
        const endHour = dragCurrent.hour;

        // –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫
        const cardIds = Array.from(calendarBody.children).map(tr => tr.dataset.cardId);
        const startIndex = cardIds.indexOf(startCardId);
        const endIndex = cardIds.indexOf(endCardId);

        const minRow = Math.min(startIndex, endIndex);
        const maxRow = Math.max(startIndex, endIndex);

        const minHour = Math.min(startHour, endHour);
        const maxHour = Math.max(startHour, endHour);

        clearMultiSelection();

        for (let r = minRow; r <= maxRow; r++) {
          const cardId = cardIds[r];
          if (!selections[dateStr][cardId]) selections[dateStr][cardId] = new Set();
          const tr = calendarBody.children[r];
          for (let c = minHour; c <= maxHour; c++) {
            const btn = tr.querySelector(`button.cell-btn[data-hour="${c}"]`);
            if (btn) {
              btn.classList.add("multi-selected");
            }
          }
        }
      }

      calendarBody.addEventListener("mousedown", e => {
        if (!e.target.classList.contains("cell-btn")) return;
        isDragging = true;
        const btn = e.target;
        const tr = btn.closest("tr");
        dragStart = {
          cardId: tr.dataset.cardId,
          hour: +btn.dataset.hour,
        };
        dragCurrent = { ...dragStart };
        updateDragSelection();
        e.preventDefault();
      });

      calendarBody.addEventListener("mousemove", e => {
        if (!isDragging) return;
        if (!e.target.classList.contains("cell-btn")) return;
        const btn = e.target;
        const tr = btn.closest("tr");
        dragCurrent = {
          cardId: tr.dataset.cardId,
          hour: +btn.dataset.hour,
        };
        updateDragSelection();
      });

      document.addEventListener("mouseup", e => {
        if (!isDragging) return;
        isDragging = false;
        const dateStr = isoDateString(currentDate);
        if (!selections[dateStr]) selections[dateStr] = {};

        const cardIds = Array.from(calendarBody.children).map(tr => tr.dataset.cardId);

        const startCardId = dragStart.cardId;
        const endCardId = dragCurrent.cardId;
        const startHour = dragStart.hour;
        const endHour = dragCurrent.hour;

        const startIndex = cardIds.indexOf(startCardId);
        const endIndex = cardIds.indexOf(endCardId);

        const minRow = Math.min(startIndex, endIndex);
        const maxRow = Math.max(startIndex, endIndex);

        const minHour = Math.min(startHour, endHour);
        const maxHour = Math.max(startHour, endHour);

        for (let r = minRow; r <= maxRow; r++) {
          const cardId = cardIds[r];
          if (!selections[dateStr][cardId]) selections[dateStr][cardId] = new Set();
          for (let c = minHour; c <= maxHour; c++) {
            if (calendarBody.children[r].querySelector(`button.cell-btn[data-hour="${c}"]`)) {
              selections[dateStr][cardId].add(c);
            }
          }
        }

        clearMultiSelection();
        updateHighlighting();
      });

      // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
      renderHeaderHours();
      renderProjectList();
      renderProjectCards();
      updateDisplay();

    })();
  </script>
<a href="/board-cards">‚Üê –ù–∞–∑–∞–¥</a>
</body>
</html>
